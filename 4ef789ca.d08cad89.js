(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{165:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(2),r=n(9),o=(n(0),n(187)),i={title:"Cloud Firestore",sidebar_label:"Usage"},s={id:"firestore/usage",title:"Cloud Firestore",description:"To start using the Cloud Firestore package within your project, import it at the top of your project files:",source:"@site/../docs/firestore/usage.mdx",permalink:"/docs/firestore/usage",editUrl:"https://github.com/FirebaseExtended/flutterfire/edit/master/docs/../docs/firestore/usage.mdx",sidebar_label:"Usage",sidebar:"main",previous:{title:"Cloud Firestore",permalink:"/docs/firestore/overview"},next:{title:"Cloud Functions",permalink:"/docs/functions/overview"}},c=[{value:"Collections &amp; Documents",id:"collections--documents",children:[]},{value:"Read Data",id:"read-data",children:[{value:"One-time Read",id:"one-time-read",children:[]},{value:"Realtime changes",id:"realtime-changes",children:[]},{value:"Document &amp; Query Snapshots",id:"document--query-snapshots",children:[]},{value:"Querying",id:"querying",children:[]}]},{value:"Writing Data",id:"writing-data",children:[]},{value:"Adding Documents",id:"adding-documents",children:[{value:"Updating documents",id:"updating-documents",children:[]}]},{value:"Removing Data",id:"removing-data",children:[]},{value:"Transactions",id:"transactions",children:[]},{value:"Batch write",id:"batch-write",children:[]},{value:"Data Security",id:"data-security",children:[]},{value:"Access Data Offline",id:"access-data-offline",children:[{value:"Configure Offline Persistence",id:"configure-offline-persistence",children:[]},{value:"Configure Cache Size",id:"configure-cache-size",children:[]},{value:"Disable and Enable Network Access",id:"disable-and-enable-network-access",children:[]}]},{value:"Emulator Usage",id:"emulator-usage",children:[]}],l={rightToc:c};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"To start using the Cloud Firestore package within your project, import it at the top of your project files:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"import 'package:cloud_firestore/cloud_firestore.dart';\n")),Object(o.b)("p",null,"Before using Firestore, you must first have ensured you have ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"overview#initializing-flutterfire"}),"initialized FlutterFire"),"."),Object(o.b)("p",null,"To create a new Firestore instance, call the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.FirebaseFirestore.instance"}),Object(o.b)("inlineCode",{parentName:"a"},"instance"))," getter on ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.FirebaseFirestore"}),Object(o.b)("inlineCode",{parentName:"a"},"FirebaseFirestore")),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseFirestore firestore = FirebaseFirestore.instance;\n")),Object(o.b)("p",null,"By default, this allows you to interact with Firestore using the default Firebase App used whilst installing FlutterFire on your\nplatform. If however you'd like to use Firestore with a secondary Firebase App, use the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.FirebaseFirestore.instanceFor"}),Object(o.b)("inlineCode",{parentName:"a"},"instanceFor"))," method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseApp secondaryApp = Firebase.app('SecondayApp');\nFirebaseFirestore firestore = FirebaseFirestore.instanceFor(app: secondaryApp);\n")),Object(o.b)("h2",{id:"collections--documents"},"Collections & Documents"),Object(o.b)("p",null,'Firestore stores data within "documents", which are contained within "collections". Documents can also contain\nnested collections. For example, our users would each have their own "document" stored inside the "Users" collection.\nThe ',Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.FirebaseFirestore.collection"}),Object(o.b)("inlineCode",{parentName:"a"},"collection"))," method allows us to reference a collection within our code."),Object(o.b)("p",null,"In the below example, we can reference the collection ",Object(o.b)("inlineCode",{parentName:"p"},"users"),", and create a new user document when a button is pressed:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"import 'package:flutter/material.dart';\n\n// Import the firebase_core and cloud_firestore plugin\nimport 'package:firebase_core/firebase_core.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\n\nclass AddUser extends StatelessWidget {\n  final String fullName;\n  final String company;\n  final int age;\n\n  AddUser(this.fullName, this.company, this.age);\n\n  @override\n  Widget build(BuildContext context) {\n    // Create a CollectionReference called users that references the firestore collection\n    CollectionReference users = FirebaseFirestore.instance.collection('users');\n\n    Future<void> addUser() {\n      // Call the users CollectionReference to add a new user\n      return users\n          .add({\n            'full_name': fullName, // John Doe\n            'company': company, // Stokes and Sons\n            'age': age // 42\n          })\n          .then((value) => print(\"User Added\"))\n          .catchError((error) => print(\"Failed to add user: $error\"));\n    }\n\n    return FlatButton(\n      onPressed: addUser,\n      child: Text(\n        \"Add User\",\n      ),\n    );\n  }\n}\n")),Object(o.b)("h2",{id:"read-data"},"Read Data"),Object(o.b)("p",null,"Cloud Firestore gives you the ability to read the value of a collection or a document. This can be a one-time read, or\nprovided by realtime updates when the data within a query changes."),Object(o.b)("h3",{id:"one-time-read"},"One-time Read"),Object(o.b)("p",null,"To read a collection or document once, call the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.Query.get"}),Object(o.b)("inlineCode",{parentName:"a"},"Query.get"))," or ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentReference.get"}),Object(o.b)("inlineCode",{parentName:"a"},"DocumentReference.get"))," methods.\nIn the below example a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://api.flutter.dev/flutter/widgets/FutureBuilder-class.html"}),Object(o.b)("inlineCode",{parentName:"a"},"FutureBuilder"))," is used to help manage the state\nof the request:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart",metastring:"highlight={11}",highlight:"{11}"}),"class GetUserName extends StatelessWidget {\n  final String documentId;\n\n  GetUserName(this.documentId);\n\n  @override\n  Widget build(BuildContext context) {\n    CollectionReference users = FirebaseFirestore.instance.collection('users');\n\n    return FutureBuilder<DocumentSnapshot>(\n      future: users.doc(documentId).get(),\n      builder:\n          (BuildContext context, AsyncSnapshot<DocumentSnapshot> snapshot) {\n\n        if (snapshot.hasError) {\n          return Text(\"Something went wrong\");\n        }\n\n        if (snapshot.connectionState == ConnectionState.done) {\n          Map<String, dynamic> data = snapshot.data();\n          return Text(\"Full Name: ${data['full_name']} ${data['last_name']}\");\n        }\n\n        return Text(\"loading\");\n      },\n    );\n  }\n}\n")),Object(o.b)("p",null,"To learn more about reading data whilst offline, view the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#access-data-offline"}),"Access Data Offline")," documentation."),Object(o.b)("h3",{id:"realtime-changes"},"Realtime changes"),Object(o.b)("p",null,"FlutterFire provides support for dealing with realtime changes to collections and documents. A new event is provided\non the initial request, and any subsequent changes to collection/document whenever a change occurs (modification, deleted\nor added)."),Object(o.b)("p",null,"Both the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.CollectionReference"}),Object(o.b)("inlineCode",{parentName:"a"},"CollectionReference"))," & ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentReference"}),Object(o.b)("inlineCode",{parentName:"a"},"DocumentReference"))," provide\na ",Object(o.b)("inlineCode",{parentName:"p"},"snapshots()")," method which returns a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://api.dart.dev/stable/2.8.3/dart-async/Stream-class.html"}),Object(o.b)("inlineCode",{parentName:"a"},"Stream")),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"Stream collectionStream = FirebaseFirestore.instance.collection('users').snapshots();\nStream documentStream = FirebaseFirestore.instance.collection('users').doc('ABC123').snapshots();\n")),Object(o.b)("p",null,"Once returned, you can subscribe to updates via the ",Object(o.b)("inlineCode",{parentName:"p"},"listen()")," method. The below example uses a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://api.flutter.dev/flutter/widgets/StreamBuilder-class.html"}),Object(o.b)("inlineCode",{parentName:"a"},"StreamBuilder")),"\nwhich helps automatically manage the streams state and disposal of the stream when it's no longer used within your app:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"class UserInformation extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    CollectionReference users = FirebaseFirestore.instance.collection('users');\n\n    return StreamBuilder<QuerySnapshot>(\n      stream: users.snapshots(),\n      builder: (BuildContext context, AsyncSnapshot<QuerySnapshot> snapshot) {\n        if (snapshot.hasError) {\n          return Text('Something went wrong');\n        }\n\n        if (snapshot.connectionState == ConnectionState.waiting) {\n          return Text(\"Loading\");\n        }\n\n        return new ListView(\n          children: snapshot.data.documents.map((DocumentSnapshot document) {\n            return new ListTile(\n              title: new Text(document.data()['full_name']),\n              subtitle: new Text(document.data()['company']),\n            );\n          }).toList(),\n        );\n      },\n    );\n  }\n}\n")),Object(o.b)("p",null,"By default, listeners do not update if there is a change that only affects the metadata. If you want to receive events\nwhen the document or query metadata changes, you can pass ",Object(o.b)("inlineCode",{parentName:"p"},"includeMetadataChanges")," to the ",Object(o.b)("inlineCode",{parentName:"p"},"snapshots")," method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseFirestore.instance\n  .collection('users')\n  .snapshots(includeMetadataChanges: true)\n")),Object(o.b)("h3",{id:"document--query-snapshots"},"Document & Query Snapshots"),Object(o.b)("p",null,"When perfoming a query, Firestore returns either a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.QuerySnapshot"}),Object(o.b)("inlineCode",{parentName:"a"},"QuerySnapshot"))," or a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentSnapshot"}),Object(o.b)("inlineCode",{parentName:"a"},"DocumentSnapshot")),"."),Object(o.b)("h4",{id:"querysnapshot"},"QuerySnapshot"),Object(o.b)("p",null,"A ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.QuerySnapshot"}),Object(o.b)("inlineCode",{parentName:"a"},"QuerySnapshot"))," is returned from a collection query, and allows you to inspect the collection, such as how many documents\nexist within it, gives access to the documents within the collection, see any changes since the last query and more."),Object(o.b)("p",null,"To access the documents within a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.QuerySnapshot"}),Object(o.b)("inlineCode",{parentName:"a"},"QuerySnapshot")),", call the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.QuerySnapshot.docs"}),Object(o.b)("inlineCode",{parentName:"a"},"docs"))," property,\nwhich returns a ",Object(o.b)("inlineCode",{parentName:"p"},"List")," containing ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentSnapshot"}),Object(o.b)("inlineCode",{parentName:"a"},"DocumentSnapshot"))," classes."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseFirestore.instance\n    .collection('users')\n    .get()\n    .then((QuerySnapshot querySnapshot) => {\n        querySnapshot.docs.forEach((doc) {\n            print(doc[\"first_name\"]);\n        });\n    });\n")),Object(o.b)("h4",{id:"documentsnapshot"},"DocumentSnapshot"),Object(o.b)("p",null,"A ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentSnapshot"}),Object(o.b)("inlineCode",{parentName:"a"},"DocumentSnapshot"))," is returned from a query, or by accessing the\ndocument directly. Even if no document exists in the database, a snapshot will always be returned."),Object(o.b)("p",null,"To determine whether the document exists, use the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentSnapshot.exists"}),Object(o.b)("inlineCode",{parentName:"a"},"exists"))," property:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseFirestore.instance\n    .collection('users')\n    .document(userId)\n    .get()\n    .then((DocumentSnapshot documentSnapshot) {\n      if (documentSnapshot.exists) {\n        print('Document exists on the database');\n      }\n    });\n")),Object(o.b)("p",null,"If the document exists, you can read the data of it by calling the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentSnapshot.data"}),Object(o.b)("inlineCode",{parentName:"a"},"data")),"\nmethod, which returns a ",Object(o.b)("inlineCode",{parentName:"p"},"Map<String, dynamic>"),", or ",Object(o.b)("inlineCode",{parentName:"p"},"null")," if it does not exist:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseFirestore.instance\n    .collection('users')\n    .doc(userId)\n    .get()\n    .then((DocumentSnapshot documentSnapshot) {\n      if (documentSnapshot.exists) {\n        print('Document data: ${documentSnapshot.data()}');\n      } else {\n        print('Document does not exist on the database');\n      }\n    });\n")),Object(o.b)("p",null,"A ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentSnapshot"}),Object(o.b)("inlineCode",{parentName:"a"},"DocumentSnapshot"))," also provides the ability to access\ndeeply nested data without manually iterating the returned ",Object(o.b)("inlineCode",{parentName:"p"},"Map")," via the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentSnapshot.get"}),Object(o.b)("inlineCode",{parentName:"a"},"get")),"\nmethod. The method accepts a dot-separated path or a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.FieldPath"}),Object(o.b)("inlineCode",{parentName:"a"},"FieldPath"))," instance.\nIf no data exists at the nested path, a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://api.dart.dev/stable/2.8.4/dart-core/StateError-class.html"}),Object(o.b)("inlineCode",{parentName:"a"},"StateError")),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"try {\n  dynamic nested = snapshot.get(FieldPath(['address', 'postcode']));\n} on StateError (e) {\n  print('No nested field exists!');\n}\n")),Object(o.b)("h3",{id:"querying"},"Querying"),Object(o.b)("p",null,"Cloud Firestore offers advanced capabilities for querying collections. Queries work with both\none-time reads or subscribing to changes."),Object(o.b)("h4",{id:"filtering"},"Filtering"),Object(o.b)("p",null,"To filter documents within a collection, the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.Query.where"}),Object(o.b)("inlineCode",{parentName:"a"},"where")),' method can be chained\nonto a collection reference. Filtering supports equality checks and "in" queries. For example, for filter\nusers where their age is greater than 20:'),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseFirestore.instance\n  .collection('users')\n  .where('age', isGreaterThan: 20)\n  .get()\n  .then(...);\n")),Object(o.b)("p",null,"Firestore also supports array queries. For example, to filter users who speak English (en) or Italian (it), use\nthe ",Object(o.b)("inlineCode",{parentName:"p"},"arrayContainsAny")," filter:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseFirestore.instance\n  .collection('users')\n  .where('language', arrayContainsAny: ['en', 'it'])\n  .get()\n  .then(...);\n")),Object(o.b)("p",null,"To learn more about all of the querying capabilities Cloud Firestore has to offer, view the\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://firebase.google.com/docs/firestore/query-data/queries"}),"Firebase documentation"),"."),Object(o.b)("h4",{id:"limiting"},"Limiting"),Object(o.b)("p",null,"To limit the number of documents returned from a query, use the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.Query.limit"}),Object(o.b)("inlineCode",{parentName:"a"},"limit"))," method on a collection reference:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseFirestore.instance\n  .collection('users')\n  .limit(2)\n  .get()\n  .then(...);\n")),Object(o.b)("p",null,"You can also limit to the last documents within the collection query by using ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.Query.limitToLast"}),Object(o.b)("inlineCode",{parentName:"a"},"limitToLast")),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseFirestore.instance\n  .collection('users')\n  .orderBy('age')\n  .limitToLast(2)\n  .get()\n  .then(...);\n")),Object(o.b)("h4",{id:"ordering"},"Ordering"),Object(o.b)("p",null,"To order the documents by a specific value, use the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.Query.orderBy"}),Object(o.b)("inlineCode",{parentName:"a"},"orderBy"))," method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseFirestore.instance\n  .collection('users')\n  .orderBy('age', descending: true)\n  .get()\n  .then(...);\n")),Object(o.b)("h4",{id:"start--end-cursors"},"Start & End Cursors"),Object(o.b)("p",null,"To start and/or end a query at a specific point within a collection, you can pass a value to the ",Object(o.b)("inlineCode",{parentName:"p"},"startAt"),", ",Object(o.b)("inlineCode",{parentName:"p"},"endAt"),",\n",Object(o.b)("inlineCode",{parentName:"p"},"startAfter")," or ",Object(o.b)("inlineCode",{parentName:"p"},"endBefore")," methods. You must specify an order to use cursor queries, for example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseFirestore.instance\n  .collection('users')\n  .orderBy('age')\n  .orderBy('company')\n  .startAt([20, 'Swift - Harber'])\n  .endAt([50, 'Wiza Group'])\n  .get()\n  .then(...);\n")),Object(o.b)("p",null,"You can further specify a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentSnapshot"}),Object(o.b)("inlineCode",{parentName:"a"},"DocumentSnapshot"))," instead of a specific value,\nby passing it to the ",Object(o.b)("inlineCode",{parentName:"p"},"startAfterDocument"),", ",Object(o.b)("inlineCode",{parentName:"p"},"startAtDocument"),", ",Object(o.b)("inlineCode",{parentName:"p"},"endAtDocument")," or ",Object(o.b)("inlineCode",{parentName:"p"},"endBeforeDocument")," methods. For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseFirestore.instance\n  .collection('users')\n  .orderBy('age')\n  .startAfterDocument(documentSnapshot)\n  .get()\n  .then(...);\n")),Object(o.b)("h4",{id:"query-limitations"},"Query Limitations"),Object(o.b)("p",null,"Cloud Firestore does not support the following types of queries:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Queries with range filters on different fields, as described in the previous section."),Object(o.b)("li",{parentName:"ul"},"Logical OR queries. In this case, you should create a separate query for each OR condition and merge the query results\nin your app."),Object(o.b)("li",{parentName:"ul"},"Queries with a != clause. In this cause, you should split the query into a greater-than query and a less-than query.\nFor example, the query clause ",Object(o.b)("inlineCode",{parentName:"li"},'where("age", isNotEqualTo: 30)')," is not supported, however you can get the same result set\nby combining two queries, one with the clause ",Object(o.b)("inlineCode",{parentName:"li"},'where("age", isLessThan: 30)')," and one with the clause\n",Object(o.b)("inlineCode",{parentName:"li"},'where("age", isGreaterThan: 30)'))),Object(o.b)("h2",{id:"writing-data"},"Writing Data"),Object(o.b)("p",null,"The ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://firebase.google.com/docs/firestore/manage-data/structure-data"}),"Firebase Documentation")," provides some great\nexamples on the best practices to structuring your data. It is recommended that you read the guide before building your\ndatabase."),Object(o.b)("p",null,"For more information on what is possible when writing data to Firestore, please refer to\nthis ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://firebase.google.com/docs/firestore/manage-data/add-data"}),"documentation")),Object(o.b)("h2",{id:"adding-documents"},"Adding Documents"),Object(o.b)("p",null,"To add a new document to a collection, use the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.CollectionReference.add"}),Object(o.b)("inlineCode",{parentName:"a"},"add"))," method\non a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.CollectionReference"}),Object(o.b)("inlineCode",{parentName:"a"},"CollectionReference")),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"class AddUser extends StatelessWidget {\n  final String fullName;\n  final String company;\n  final int age;\n\n  AddUser(this.fullName, this.company, this.age);\n\n  @override\n  Widget build(BuildContext context) {\n    // Create a CollectionReference called users that references the firestore collection\n    CollectionReference users = FirebaseFirestore.instance.collection('users');\n\n    Future<void> addUser() {\n      // Call the users CollectionReference to add a new user\n      return users\n          .add({\n            'full_name': fullName, // John Doe\n            'company': company, // Stokes and Sons\n            'age': age // 42\n          })\n          .then((value) => print(\"User Added\"))\n          .catchError((error) => print(\"Failed to add user: $error\"));\n    }\n\n    return FlatButton(\n      onPressed: addUser,\n      child: Text(\n        \"Add User\",\n      ),\n    );\n  }\n}\n")),Object(o.b)("p",null,"The ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.CollectionReference.add"}),Object(o.b)("inlineCode",{parentName:"a"},"add"))," method adds the new document to your collection with a\nunique auto-generated ID. If you'd like to specify your own ID, call the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentReference.set"}),Object(o.b)("inlineCode",{parentName:"a"},"set")),"\nmethod on a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentReference"}),Object(o.b)("inlineCode",{parentName:"a"},"DocumentReference"))," instead:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart",metastring:"highlight={6-8}",highlight:"{6-8}"}),"CollectionReference users = FirebaseFirestore.instance.collection('users');\n\nFuture<void> addUser() {\n  return users\n    .doc('ABC123')\n    .set({\n      'full_name': \"Mary Jane\",\n      'age': 18\n    })\n    .then((value) => print(\"User Added\"))\n    .catchError((error) => print(\"Failed to add user: $error\"));\n}\n")),Object(o.b)("p",null,"Calling ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentReference.set"}),Object(o.b)("inlineCode",{parentName:"a"},"set"))," with a id that already exists on the collection will replace all the document data."),Object(o.b)("h3",{id:"updating-documents"},"Updating documents"),Object(o.b)("p",null,"Sometimes you may wish to update a document, rather than replacing all of the data. The ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentReference.set"}),Object(o.b)("inlineCode",{parentName:"a"},"set")),"\nmethod above replaces any existing data on a given ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentReference"}),Object(o.b)("inlineCode",{parentName:"a"},"DocumentReference")),".\nIf you'd like to update a document instead, use the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentReference.update"}),Object(o.b)("inlineCode",{parentName:"a"},"update"))," method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart",metastring:"highlight={6}",highlight:"{6}"}),"CollectionReference users = FirebaseFirestore.instance.collection('users');\n\nFuture<void> updateUser() {\n  return users\n    .doc('ABC123')\n    .update({'company': 'Stokes and Sons'})\n    .then((value) => print(\"User Updated\"))\n    .catchError((error) => print(\"Failed to update user: $error\"));\n}\n")),Object(o.b)("p",null,"The method also provides support for updating deeply nested values via dot-notation:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart",metastring:"highlight={6}",highlight:"{6}"}),"CollectionReference users = FirebaseFirestore.instance.collection('users');\n\nFuture<void> updateUser() {\n  return users\n    .doc('ABC123')\n    .update({'info.address.zipcode': 90210})\n    .then((value) => print(\"User Updated\"))\n    .catchError((error) => print(\"Failed to update user: $error\"));\n}\n")),Object(o.b)("h4",{id:"field-values"},"Field values"),Object(o.b)("p",null,"Cloud Firestore supports storing and manipulating values on your database, such as Timestamps, GeoPoints, Blobs and\narray management."),Object(o.b)("p",null,"To store ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore_platform_interface.GeoPoint"}),Object(o.b)("inlineCode",{parentName:"a"},"GeoPoint"))," values, provide the latitude\nand longitude to the GeoPoint class:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart",metastring:"highlight={6}",highlight:"{6}"}),"CollectionReference users = FirebaseFirestore.instance.collection('users');\n\nFuture<void> updateUser() {\n  return users\n    .doc('ABC123')\n    .update({'info.address.location': GeoPoint(53.483959, -2.244644)})\n    .then((value) => print(\"User Updated\"))\n    .catchError((error) => print(\"Failed to update user: $error\"));\n}\n")),Object(o.b)("p",null,"To store a Blob such as an image, provide a ",Object(o.b)("inlineCode",{parentName:"p"},"Uint8List"),". The below example shows how to get an image from your ",Object(o.b)("inlineCode",{parentName:"p"},"assets"),"\ndirectory and nest it in the ",Object(o.b)("inlineCode",{parentName:"p"},"info")," object in Firestore."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart",metastring:"highlight={4-11}",highlight:"{4-11}"}),"CollectionReference users = FirebaseFirestore.instance.collection('users');\n\nFuture<void> updateUser() {\n  return rootBundle\n    .load('assets/images/sample.jpg')\n    .then((bytes) => bytes.buffer.asUint8List())\n    .then((avatar) {\n      return users\n        .doc('ABC123')\n        .update({'info.avatar': Blob(avatar)});\n      })\n    .then((value) => print(\"User Updated\"))\n    .catchError((error) => print(\"Failed to update user: $error\"));\n}\n")),Object(o.b)("h2",{id:"removing-data"},"Removing Data"),Object(o.b)("p",null,"To delete documents with Cloud Firestore, you can use the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentReference.delete"}),Object(o.b)("inlineCode",{parentName:"a"},"delete")),"\nmethod on a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentReference"}),Object(o.b)("inlineCode",{parentName:"a"},"DocumentReference")),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart",metastring:"highlight={6}",highlight:"{6}"}),"CollectionReference users = FirebaseFirestore.instance.collection('users');\n\nFuture<void> deleteUser() {\n  return users\n    .doc('ABC123')\n    .delete()\n    .then((value) => print(\"User Deleted\"))\n    .catchError((error) => print(\"Failed to delete user: $error\"));\n}\n")),Object(o.b)("p",null,"If you need to remove specific properties from within a document rather than the document itself,\nyou can use the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.DocumentReference.delete"}),Object(o.b)("inlineCode",{parentName:"a"},"delete"))," method with\nthe ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.FieldValue"}),Object(o.b)("inlineCode",{parentName:"a"},"FieldValue"))," class:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart",metastring:"highlight={6}",highlight:"{6}"}),"CollectionReference users = FirebaseFirestore.instance.collection('users');\n\nFuture<void> deleteField() {\n  return users\n    .doc('ABC123')\n    .update({'age': FieldValue.delete()})\n    .then((value) => print(\"User Deleted\"))\n    .catchError((error) => print(\"Failed to delete user: $error\"));\n}\n")),Object(o.b)("h2",{id:"transactions"},"Transactions"),Object(o.b)("p",null,"Transactions are a way to ensure that a write operation only occurs using the latest data available on the server.\nTransactions never partially apply writes, and writes execute at the end of a successful transaction."),Object(o.b)("p",null,"Transactions are useful when you want to update a field based on its current value, or the value of another field. If\nyou want to write multiple documents without using the documents current state, a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"usage#batch-write"}),"batch write"),"\nshould be used."),Object(o.b)("p",null,"When using transactions, note that:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Read operations must come before write operations"),Object(o.b)("li",{parentName:"ul"},"Transactions will fail is the client is offline, they cannot use cached data")),Object(o.b)("p",null,'An example of where a transaction could be used would be in an application where a user can subscribe to a channel. When\na user presses the subscribe button, a "subscribers" field in a document increments. Without using Transactions, we would\nfirst need to read the existing value, and then increment that value using two separate operations.'),Object(o.b)("p",null,"On a high traffic application, the value on the server could have already changed by the time the write operation sets\na new value, causing the number to be inconsistent."),Object(o.b)("p",null,"Transactions remove this issue by atomically updating the value of the server. If the value changes whilst the transaction\nis executing, it will retry, ensuring the value on the server is used, rather than the client value."),Object(o.b)("p",null,"To execute a transaction, call the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.FirebaseFirestore.runTransaction"}),Object(o.b)("inlineCode",{parentName:"a"},"runTransaction"))," method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"// Create a reference to the document the transaction will use\nDocumentReference documentReference = FirebaseFirestore.instance\n  .collection('users')\n  .doc(documentId);\n\nreturn Firestore.instance.runTransaction((transaction) async {\n  // Get the document\n  DocumentSnapshot snapshot = await transaction.get(documentReference);\n\n  if (!snapshot.exists) {\n    throw Exception(\"User does not exist!\");\n  }\n\n  // Update the follower count based on the current count\n  int newFollowerCount = snapshot.data()['followers'] + 1;\n\n  // Perform an update on the document\n  transaction.update(documentReference, {'followers': newFollowerCount});\n\n  // Return the new count\n  return newFollowerCount;\n})\n.then((value) => print(\"Follower count updatd to $value\"))\n.catchError((error) => print(\"Failed to update user followers: $error\"));\n")),Object(o.b)("p",null,"In the above example, if the document changes at any point during the transaction, it will retry\nup-to five times."),Object(o.b)("p",null,"You should not directly modify application state inside of the transaction, as the handler may execute multiple\ntimes. You should instead return a value at the end of the handler, updating application state once the transaction\nhas completed."),Object(o.b)("p",null,"If an exception is thrown within the handler, the entire transaction will be aborted."),Object(o.b)("h2",{id:"batch-write"},"Batch write"),Object(o.b)("p",null,"Firestore lets you execute multiple write operations as a single batch that can contain any\ncombination of ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.WriteBatch.set"}),Object(o.b)("inlineCode",{parentName:"a"},"set")),", ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.WriteBatch.update"}),Object(o.b)("inlineCode",{parentName:"a"},"update")),",\nor ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.WriteBatch.delete"}),Object(o.b)("inlineCode",{parentName:"a"},"delete"))," operations."),Object(o.b)("p",null,"First, create a new batch instance via the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.FirebaseFirestore.batch"}),Object(o.b)("inlineCode",{parentName:"a"},"batch"))," method, then perform\nthe operations on the batch, and then commit it once ready. The below example shows how to delete\nall documents in a collection in a single operation:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"CollectionReference users = FirebaseFirestore.instance.collection('users');\n\nFuture<void> batchDelete() {\n  WriteBatch batch = FirebaseFirestore.instance.batch();\n\n  return users.get().then((querySnapshot) {\n    querySnapshot.documents.forEach((document) {\n      batch.delete(document.reference);\n    });\n\n    return batch.commit();\n  });\n}\n")),Object(o.b)("h2",{id:"data-security"},"Data Security"),Object(o.b)("p",null,"It is important that you understand how to write rules in your Firebase console to ensure that your data is secure.\nPlease follow the Firebase Firestore documentation on ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://firebase.google.com/docs/firestore/security/get-started"}),"security"),"."),Object(o.b)("h2",{id:"access-data-offline"},"Access Data Offline"),Object(o.b)("h3",{id:"configure-offline-persistence"},"Configure Offline Persistence"),Object(o.b)("p",null,"Firestore provides out of the box support for offline capabilities. When reading and writing data, Firestore uses a\nlocal database which automatically synchronizes with the server. Cloud Firestore functionality continues when users are\noffline, and automatically handles data migration when they regain connectivity."),Object(o.b)("p",null,"This functionality is enabled by default, however it can be disabled if needed. The ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.FirebaseFirestore.settings"}),Object(o.b)("inlineCode",{parentName:"a"},"settings"))," must be set before any Firestore interaction is performed:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"// Web.\nawait FirebaseFirestore.instance.enablePersistence();\n\n// All other platforms.\nFirebaseFirestore.instance.settings =\n    Settings(persistenceEnabled: false);\n")),Object(o.b)("p",null,"If you want to clear any persisted data, you can call the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.FirebaseFirestore.clearPersistence"}),Object(o.b)("inlineCode",{parentName:"a"},"clearPersistence()"))," method."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"await FirebaseFirestore.instance.clearPersistence();\n")),Object(o.b)("p",null,"Calls to update settings or clearing persistence must be carried out before any other usage of\nFirestore. If called afterwards, they will take effect on the next Firestore claim (e.g. restarting\nthe application)."),Object(o.b)("h3",{id:"configure-cache-size"},"Configure Cache Size"),Object(o.b)("p",null,"When persistence is enabled, Firestore caches every document for offline access. After exceeding the cache size, Firestore\nwill attempt to remove older, unused data. You can configure different cache sizes, or disable the removal process:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"// The default value is 40 MB. The threshold must be set to at least 1 MB,\n// and can be set to Settings.CACHE_SIZE_UNLIMITED to disable garbage collection.\n\nFirebaseFirestore.instance.settings = \n    Settings(cacheSizeBytes: Settings.CACHE_SIZE_UNLIMITED);\n")),Object(o.b)("h3",{id:"disable-and-enable-network-access"},"Disable and Enable Network Access"),Object(o.b)("p",null,"It is possible to disable network access for your Firestore client. While network access is disabled, all Firestore requests\nretrieve results from the cache. Any write operations are queued until network access is re-enabled."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"await FirebaseFirestore.instance.disableNetwork()\n")),Object(o.b)("p",null,"To re-enabled network access, call the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.FirebaseFirestore.enableNetwork"}),Object(o.b)("inlineCode",{parentName:"a"},"enableNetwork"))," method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"await FirebaseFirestore.instance.enableNetwork()\n")),Object(o.b)("h2",{id:"emulator-usage"},"Emulator Usage"),Object(o.b)("p",null,"If you are using the local ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://firebase.google.com/docs/rules/emulator-setup"}),"Firestore emulators"),", then it is possible to\nconnect to these by passing a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.Settings.host"}),Object(o.b)("inlineCode",{parentName:"a"},"host"))," parameter to the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"!cloud_firestore.FirebaseFirestore.settings"}),Object(o.b)("inlineCode",{parentName:"a"},"settings"))," method,\nimmediately after initializing Firebase. Ensure you pass the correct port on which the Firebase emulator is running on."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"On Android emulators, to reference ",Object(o.b)("inlineCode",{parentName:"p"},"localhost"),", use the ",Object(o.b)("inlineCode",{parentName:"p"},"10.0.2.2")," IP address instead.")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"// Import foundation for [TargetPlatform].\nimport 'package:flutter/foundation.dart';\n\n// ...\n\n// Switch host based on platform.\nString host = defaultTargetPlatform == TargetPlatform.android\n    ? '10.0.2.2:8080'\n    : 'localhost:8080';\n\n// Set the host as soon as possible.\nFirebaseFirestore.instance.settings =\n    Settings(host: host, sslEnabled: false);\n\n// ...\n")))}u.isMDXComponent=!0},187:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),p=a,h=d["".concat(i,".").concat(p)]||d[p]||b[p]||o;return n?r.a.createElement(h,s(s({ref:t},l),{},{components:n})):r.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);