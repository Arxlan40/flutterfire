(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{163:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var i=n(2),a=n(9),r=(n(0),n(186)),o={title:"Phone Authentication",sidebar_label:"Phone Auth"},c={id:"auth/phone",title:"Phone Authentication",description:"Phone authentication allows users to sign in to Firebase using their phone as the authenticator. An SMS message is sent",source:"@site/../docs/auth/phone.mdx",permalink:"/docs/auth/phone",editUrl:"https://github.com/FirebaseExtended/flutterfire/edit/master/docs/../docs/auth/phone.mdx",sidebar_label:"Phone Auth"},l=[{value:"Setup",id:"setup",children:[]},{value:"Usage",id:"usage",children:[{value:"Native: <code>verifyPhoneNumber</code>",id:"native-verifyphonenumber",children:[]},{value:"Web: <code>signInWithPhoneNumber</code>",id:"web-signinwithphonenumber",children:[]}]},{value:"Testing",id:"testing",children:[]}],b={rightToc:l};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Phone authentication allows users to sign in to Firebase using their phone as the authenticator. An SMS message is sent\nto the user (using the provided phone number) containing a unique code. Once the code has been authorized, the user is able to sign\ninto Firebase."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Phone numbers that end users provide for authentication will be sent and stored by Google to improve spam and abuse\nprevention across Google service, including to, but not limited to Firebase. Developers should ensure they have the\nappropriate end-user conset prior to using the Firebase Authentication phone number sign-in service.authentication")),Object(r.b)("p",null,"Firebase Phone Authentication is not supported in all countries. Please see their ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://firebase.google.com/support/faq/#develop"}),"FAQs")," for more information"),Object(r.b)("h2",{id:"setup"},"Setup"),Object(r.b)("p",null,"Before starting with Phone Authentication, ensure you have followed these steps:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Enable Phone as a Sign-In method in the ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://console.firebase.google.com/u/0/project/_/authentication/providers"}),"Firebase console"),"."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"Android"),": If you haven't already set your app's SHA-1 hash in the ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://console.firebase.google.com/"}),"Firebase console"),", do so.\nSee ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://developers.google.com/android/guides/client-auth"}),"Authenticating Your Client")," for information about finding your app's SHA-1 hash."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"iOS"),": In XCode, ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"http://help.apple.com/xcode/mac/current/#/devdfd3d04a1"}),"enable push notifications")," for your project & ensure\nyour APNs authentication key is ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://firebase.google.com/docs/cloud-messaging/ios/certs"}),"configured with Firebase Cloud Messaging (FCM)"),".\nTo view an indepth explaination of this step, view the ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://firebase.google.com/docs/auth/ios/phone-auth"}),"Firebase iOS Phone Auth")," documentation."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"Web"),": Ensure that you have added your applications domian on the ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://console.firebase.google.com/"}),"Firebase console"),", under\n",Object(r.b)("strong",{parentName:"li"},"OAuth redirect domains"),".")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note"),"; Phone number sign-in is only available for use on real devices and the web. To test your authentication flow on device emulators,\nplease see ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"#testing"}),"Testing"),"."),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("p",null,"FlutterFire provides two individual ways to sign a user in with their phone number. Native (e.g. Android & iOS) platforms provide\ndifferent functionality to validating a phone number than the web, therefore two methods exist for each platform exclusively:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Native Platform"),": ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"!firebase_auth.FirebaseAuth.verifyPhoneNumber"}),Object(r.b)("inlineCode",{parentName:"a"},"verifyPhoneNumber")),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Web Platform"),": ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"!firebase_auth.FirebaseAuth.signInWithPhoneNumber"}),Object(r.b)("inlineCode",{parentName:"a"},"signInWithPhoneNumber")),".")),Object(r.b)("h3",{id:"native-verifyphonenumber"},"Native: ",Object(r.b)("inlineCode",{parentName:"h3"},"verifyPhoneNumber")),Object(r.b)("p",null,"On native platforms, the users phone number must be first verified and then the user can either sign-in or link their account with a\n",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"!firebase_auth_platform_interface.PhoneAuthCredential"}),Object(r.b)("inlineCode",{parentName:"a"},"PhoneAuthCredential")),"."),Object(r.b)("p",null,"First you must prompt the user for their phone number. Once provided, call the ",Object(r.b)("inlineCode",{parentName:"p"},"verifyPhoneNumber()")," method:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-dart"}),"await FirebaseAuth.instance.verifyPhoneNumber(\n  phoneNumber: '+44 7123 123 456',\n  verificationCompleted: (PhoneAuthCredential credential) {},\n  verificationFailed: (FirebaseAuthException e) {},\n  codeSent: (String verificationId, int resendToken) {},\n  codeAutoRetrievalTimeout: (String verificationId) {},\n);\n")),Object(r.b)("p",null,"There are 4 seperate callbacks that you must handle, each will determine how you update the application UI:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("a",Object(i.a)({parentName:"strong"},{href:"#verificationCompleted"}),"verificationCompleted")),": Automatic handling of the SMS code on Android devices."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("a",Object(i.a)({parentName:"strong"},{href:"#verificationFailed"}),"verificationFailed")),": Handle failure events such as invalid phone numbers or whethehr the SMS quota has been exceeded."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("a",Object(i.a)({parentName:"strong"},{href:"#codeSent"}),"codeSent")),": Handle when a code has been sent to the device from Firebase, used to prompt users to enter the code."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("a",Object(i.a)({parentName:"strong"},{href:"#codeAutoRetrievalTimeout"}),"codeAutoRetrievalTimeout")),": Handle a timeout of when automatic SMS code handling fails.")),Object(r.b)("h4",{id:"verificationcompleted"},"verificationCompleted"),Object(r.b)("p",null,"This handler will only be called on Android devices which support automatic SMS code resolution."),Object(r.b)("p",null,"When the SMS code is delivered to the device Android will automatically verify the SMS code without\nrequiring the user to manually input the code. If this event occurs, a ",Object(r.b)("inlineCode",{parentName:"p"},"PhoneAuthCredential")," is automatically provided which can be\nused to sign-in with or link the users phone number."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseAuth auth = FirebaseAuth.instance;\n\nawait auth.verifyPhoneNumber(\n  phoneNumber: '+44 7123 123 456',\n  verificationCompleted: (PhoneAuthCredential credential) async {\n    // ANDROID ONLY!\n\n    // Sign the user in (or link) with the auto-generated credential\n    await auth.signInWithCredential(credential);\n  },\n);\n")),Object(r.b)("h4",{id:"verificationfailed"},"verificationFailed"),Object(r.b)("p",null,"If Firebase returns an error, for example for an incorrect phone number or if the SMS quota for the project has exceeded,\na ",Object(r.b)("inlineCode",{parentName:"p"},"FirebaseAuthException")," will be sent to this handler. In this case, you would prompt your user something went wrong depending on the error\ncode."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseAuth auth = FirebaseAuth.instance;\n\nawait auth.verifyPhoneNumber(\n  phoneNumber: '+44 7123 123 456',\n  verificationFailed: (FirebaseAuthException e) {\n    if (e.code == 'invalid-phone-number') {\n      print('The provided phone number is not valid.');\n    }\n\n    // Handle other errors\n  },\n);\n")),Object(r.b)("h4",{id:"codesent"},"codeSent"),Object(r.b)("p",null,"When Firebase sends an SMS code to the device, this handler is triggered with a ",Object(r.b)("inlineCode",{parentName:"p"},"verificationId")," and ",Object(r.b)("inlineCode",{parentName:"p"},"resendToken"),"."),Object(r.b)("p",null,"Once triggered, it would be a good time to update your application UI to prompt the user to enter the SMS code they're expecting.\nOnce the SMS code has been entered, you can combine the verification ID with the SMS code to create a new ",Object(r.b)("inlineCode",{parentName:"p"},"PhoneAuthCredential"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseAuth auth = FirebaseAuth.instance;\n\nawait auth.verifyPhoneNumber(\n  phoneNumber: '+44 7123 123 456',\n  codeSent: (String verificationId, int resendToken) async {\n    // Update the UI - wait for the user to enter the SMS code\n    String smsCode = 'xxxx';\n\n    // Create a PhoneAuthCredential with the code\n    PhoneAuthCredential phoneAuthCredential = PhoneAuthProvider.credential(verificationId, smsCode);\n\n    // Sign the user in (or link) with the credential\n    await auth.signInWithCredential(phoneAuthCredential);\n  },\n);\n")),Object(r.b)("p",null,"By default, Firebase will not re-send a new SMS message if it has been recently sent. You can however override this behaviour\nby re-calling the ",Object(r.b)("inlineCode",{parentName:"p"},"verifyPhoneNumber")," method with the resend token to the ",Object(r.b)("inlineCode",{parentName:"p"},"forceResendingToken")," argument.\nIf successful, the SMS message will be resent."),Object(r.b)("h4",{id:"codeautoretrievaltimeout"},"codeAutoRetrievalTimeout"),Object(r.b)("p",null,"On Android devices which support automatic SMS code resolution, this handler will be called if the device has not automatically\nresolved an SMS message within a certain timeframe. Once the timeframe has passed, the device will no longer attempt to resolve\nany incoming messages."),Object(r.b)("p",null,"By default, the device waits for 30 seconds however this can be customized with the ",Object(r.b)("inlineCode",{parentName:"p"},"timeout")," argument:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseAuth auth = FirebaseAuth.instance;\n\nawait auth.verifyPhoneNumber(\n  phoneNumber: '+44 7123 123 456',\n  timeout: const Duration(seconds: 60),\n  codeAutoRetrievalTimeout: (String verificationId) {\n    // Auto-resolution timed out...\n  },\n);\n")),Object(r.b)("h3",{id:"web-signinwithphonenumber"},"Web: ",Object(r.b)("inlineCode",{parentName:"h3"},"signInWithPhoneNumber")),Object(r.b)("p",null,"TODO"),Object(r.b)("h2",{id:"testing"},"Testing"),Object(r.b)("p",null,"Firebase provides support for locally testing phone numbers:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},'On the Firebase Console, select the "Phone" authentication provider and click on the "Phone numbers for testing" dropdown.'),Object(r.b)("li",{parentName:"ol"},"Enter a new phone number (e.g. ",Object(r.b)("inlineCode",{parentName:"li"},"+44 7444 555666"),") and a test code (e.g. ",Object(r.b)("inlineCode",{parentName:"li"},"123456"),").")),Object(r.b)("p",null,"If providing a test phone number to either the ",Object(r.b)("inlineCode",{parentName:"p"},"verifyPhoneNumber")," or ",Object(r.b)("inlineCode",{parentName:"p"},"signInWithPhoneNumber")," methods, no SMS will actually be sent. You\ncan instead provide the test code directly to the ",Object(r.b)("inlineCode",{parentName:"p"},"PhoneAuthProvider")," or with ",Object(r.b)("inlineCode",{parentName:"p"},"signInWithPhoneNumber"),"s confirmation result handler."))}s.isMDXComponent=!0},186:function(e,t,n){"use strict";n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return p}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var b=a.a.createContext({}),s=function(e){var t=a.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},h=function(e){var t=s(e.components);return a.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),h=s(n),d=i,p=h["".concat(o,".").concat(d)]||h[d]||u[d]||r;return n?a.a.createElement(p,c(c({ref:t},b),{},{components:n})):a.a.createElement(p,c({ref:t},b))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var b=2;b<r;b++)o[b]=n[b];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);