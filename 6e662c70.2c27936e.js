(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{171:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return d}));var r=n(2),a=n(9),i=(n(0),n(186)),o={title:"Error Handling",sidebar_label:"Error Handling"},c={id:"auth/error-handling",title:"Error Handling",description:"The Firebase Authentication SDKs provided a simple way for catching the various errors which may occur which using",source:"@site/../docs/auth/error-handling.mdx",permalink:"/docs/auth/error-handling",editUrl:"https://github.com/FirebaseExtended/flutterfire/edit/master/docs/../docs/auth/error-handling.mdx",sidebar_label:"Error Handling"},s=[{value:"Handling <code>account-exists-with-different-credential</code> Errors",id:"handling-account-exists-with-different-credential-errors",children:[]}],l={rightToc:s};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The Firebase Authentication SDKs provided a simple way for catching the various errors which may occur which using\nauthentication methods. FlutterFire exposes these errors via the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"!firebase_auth_platform_interface.FirebaseAuthException"}),Object(i.b)("inlineCode",{parentName:"a"},"FirebaseAuthException")),"\nclass."),Object(i.b)("p",null,"At a minimum, a ",Object(i.b)("inlineCode",{parentName:"p"},"code")," and ",Object(i.b)("inlineCode",{parentName:"p"},"message")," are provided, however in some cases additional properties such as an email address\nand credential are also provided. For example, if the user is attempting to sign in wih an email and password,\nany errors thrown can be explicially caught:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-dart"}),'try {\n  await FirebaseAuth.instance.signInWithEmailAndPassword(\n    email: "barry.allen@example.com",\n    password: "SuperSecretPassword!"\n  );\n} catch on FirebaseAuthException (e) {\n  print(\'Failed with error code: ${e.code}\');\n  print(e.message);\n}\n')),Object(i.b)("p",null,"Each method provides various error codes and messages depending on the type of authentication invocation type. The\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://pub.dev/documentation/firebase_auth/latest/"}),"Reference API")," provides up-to-date details on the errors for each method."),Object(i.b)("h2",{id:"handling-account-exists-with-different-credential-errors"},"Handling ",Object(i.b)("inlineCode",{parentName:"h2"},"account-exists-with-different-credential")," Errors"),Object(i.b)("p",null,"If you enabled the One account per email address setting in the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://console.firebase.google.com/project/_/authentication/providers"}),"Firebase console"),",\nwhen a user tries to sign in a to a provider (such as Google) with an email that already exists for another Firebase user's provider\n(such as Facebook), the error ",Object(i.b)("inlineCode",{parentName:"p"},"auth/account-exists-with-different-credential")," is thrown along with an ",Object(i.b)("inlineCode",{parentName:"p"},"AuthCredential")," class (Google ID token).\nTo complete the sign in to the intended provider, the user has to sign first to the existing provider (e.g. Facebook) and then link to the former\n",Object(i.b)("inlineCode",{parentName:"p"},"AuthCredential")," (Google ID token)."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-dart"}),"FirebaseAuth auth = FirebaseAuth.instance;\n\n// Create a credential from a Google Sign-in Request\nGoogleAuthCredential googleAuthCredential = GoogleAuthProvider.credential(accessToken: 'xxxx');\n\ntry {\n  // Attempt to sign in the user in with Google\n  await auth.signInWithCredential(googleAuthCredential);\n} catch on FirebaseAuthError (e) {\n  if (e.code == 'account-exists-with-different-credential') {\n    // The account already exists with a different credential\n    String email = e.email;\n    AuthCredential pendingCredential = e.credential;\n\n    // Fetch a list of what sign-in methods exist for the conflicting user\n    List<String> userSignInMethods = await auth.fetchSignInMethodsForEmail(email);\n\n    // If the user has several sign-in methods,\n    // the first method in the list will be the \"recommended\" method to use.\n    if (userSignInMethods.first == 'password') {\n      // Prompt the user to enter their password\n      String password = '...';\n\n      // Sign the user in to their account with the password\n      UserCredential userCredential = await auth.signInWithEmailAndPassword(\n        email: email,\n        password: password,\n      );\n\n      // Link the pending credential with the existing account\n      await userCredential.user.linkWithCredential(pendingCredential);\n\n      // Success! Go back to your application flow\n      return goToApplication();\n    }\n\n    // Since other providers are now external, you must now sign the user in with another\n    // auth provider, such as Facebook.\n    if (userSignInMethods.first == 'facebook.com') {\n      // Create a new Facebook credential\n      String accessToken = await triggerFacebookAuthentication();\n      FacebookAuthCredential facebookAuthCredential = FacebookAuthProvider.credential(accessToken);\n\n      // Sign the user in with the credential\n      UserCredential userCredential = await auth.signInWithCredential(facebookAuthCredential);\n\n      // Link the pending credential with the existing account\n      await userCredential.user.linkWithCredential(pendingCredential);\n\n      // Success! Go back to your application flow\n      return goToApplication();\n    }\n\n    // Handle other OAuth providers...\n  }\n}\n")))}d.isMDXComponent=!0},186:function(e,t,n){"use strict";n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),d=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},h=function(e){var t=d(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),h=d(n),p=r,b=h["".concat(o,".").concat(p)]||h[p]||u[p]||i;return n?a.a.createElement(b,c(c({ref:t},l),{},{components:n})):a.a.createElement(b,c({ref:t},l))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);